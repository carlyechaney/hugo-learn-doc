[
{
	"uri": "http://localhost:1313/uneurl/cont/pages/",
	"title": "Pages",
	"tags": [],
	"description": "",
	"content": " In Hugo, pages are the core of your site. Once it is configure, pages are definitely the added value to your documentation site.\nFolders Organize your site like any other Hugo project. Typically, you will have a content folder with all your pages.\n. └── content ├── brace | ├── yourselves.md \u0026lt;- http://example.com/brace/yourselves/ | ├── winter | | └── index.md \u0026lt;- http://example.com/brace/winter/ | └── index.md \u0026lt;- http://example.com/brace/ ├── is | ├── coming.md \u0026lt;- http://example.com/is/comming/ | └── index.md \u0026lt;- http://example.com/is/ └── ned-stark.md \u0026lt;- http://example.com/ned-stark/  At that time, Hugo-theme-learn supports only one level inside a chapter. So you can\u0026rsquo;t have http://example.com/chapter1/chapter1.1/page\n Types Hugo-theme-learn defines two types of pages. Default and Chapter.\nA Chapter is a page that contains another page. Commonly, it contains a simple title and a catch line to define content that can be found under it. You can define any HTML as prefix for the menu. In the example below, it\u0026rsquo;s just a number but that could be an icon.\n--- title: Basics chapter: true weight: 0 icon: \u0026quot;\u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt;\u0026quot; --- ### Chapter 1 # Basics Discover what this Hugo theme is all about and the core-concepts behind it.  A Default page is any other content page.\n--- title: What is this Hugo theme ? weight: 5 --- **Hugo-theme-learn** is a theme for [Hugo](https://gohugo.io/), a fast and modern static website engine written in Go. Where Hugo is often used for blogs, this theme is fully designed for **technical documentation**. This theme is a partial porting of the [Learn theme](http://learn.getgrav.org/) of [Grav](https://getgrav.org/), a modern flat-file CMS written in PHP. This current documentation has been statically generated with Hugo with a simple command : `hugo -t hugo-theme-learn` ![Grav Overview](images/grav-overview.png?width=60%)  To tell Hugo-theme-learn to consider a page as a chapter, just the name of your file as _index.md.\nHugo-theme-learn provides archetypes to help you create this kind of pages.\nFront Matter Each Hugo page has to define a Front Matter in yaml, toml or json.\nHugo-theme-learn uses the following parameters on top of the existing ones :\n+++ # Set to true, it automatically generates a table of contents, available in the top of the screen. toc = \u0026quot;false\u0026quot; # Override path to previous page. This theme automatically generates previous arrows prev = \u0026quot;\u0026quot; # Override path to next page. This theme automatically generates next arrows next = \u0026quot;\u0026quot; # Set HTML in this parameter. The chapter title in the menu will be prefixed by this. Useful for icons. icon: \u0026quot;\u0026quot; +++  Ordering Hugo provides a flexible way to handle order for your pages.\nThe simplest way is to use weight parameter in the front matter of your page.\nBe aware that weight are applied separately for each kind of page (Chapter and Default). It means that if you mix chapter pages and default pages at the same level, the order won\u0026rsquo;t be displayed as expected.\n The workaround is to override page type by adding chapter: false in the front matter of your Chapter page (identified as _index.md file).\nFor example, with 5 chapters page and 1 default page at the same level, rename the default page as _index.md and add chapter: false in the front-matter. It will then be considered as chapter for weight order computing, but content will be displayed as a default page.\n"
},
{
	"uri": "http://localhost:1313/uneurl/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Basics Discover what this Hugo theme is all about and the core-concepts behind it.\n"
},
{
	"uri": "http://localhost:1313/uneurl/cont/pages/first-child-page/",
	"title": "First Child Page",
	"tags": [],
	"description": "",
	"content": "ergergerg\n"
},
{
	"uri": "http://localhost:1313/uneurl/basics/what-is-this-hugo-theme/",
	"title": "What is this Hugo theme ?",
	"tags": [],
	"description": "",
	"content": "Hugo-theme-learn is a theme for Hugo, a fast and modern static website engine written in Go. Where Hugo is often used for blogs, this theme is fully designed for technical documentation.\nThis theme is a partial porting of the Learn theme of Grav, a modern flat-file CMS written in PHP.\nThis current documentation has been statically generated with Hugo with a simple command : hugo -t hugo-theme-learn\n"
},
{
	"uri": "http://localhost:1313/uneurl/cont/markdown/",
	"title": "Markdown syntax",
	"tags": [],
	"description": "",
	"content": " This page is a shameful copy of the great Grav original page. Only difference is information about image customization (resizing, add CSS classes\u0026hellip;)\n Let\u0026rsquo;s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\nMarkdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.\nSome of the key benefits are:\n Markdown is simple to learn, with minimal extra characters so it\u0026rsquo;s also quicker to write content. Less chance of errors when writing in markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use!  John Gruber, the author of Markdown, puts it like this:\n The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. \u0026ndash; John Gruber\n Grav ships with built-in support for Markdown and Markdown Extra. You must enable Markdown Extra in your system.yaml configuration file\nWithout further delay, let us go over the main elements of Markdown and what the resulting HTML looks like:\n Bookmark this page for easy future reference!\n Headings Headings from h1 through h6 are constructed with a # for each level:\n# h1 Heading ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading  Renders to:\nh1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading HTML:\n\u0026lt;h1\u0026gt;h1 Heading\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;h2 Heading\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;h3 Heading\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;h4 Heading\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;h5 Heading\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;h6 Heading\u0026lt;/h6\u0026gt;  Comments Comments should be HTML compatible\n\u0026lt;!-- This is a comment --\u0026gt;  Comment below should NOT be seen:\nHorizontal Rules The HTML \u0026lt;hr\u0026gt; element is for creating a \u0026ldquo;thematic break\u0026rdquo; between paragraph-level elements. In markdown, you can create a \u0026lt;hr\u0026gt; with any of the following:\n ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks  renders to:\nBody Copy Body copy written as normal, plain text will be wrapped with \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; tags in the rendered HTML.\nSo this body copy:\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.  renders to this HTML:\n\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u0026lt;/p\u0026gt;  Emphasis Bold For emphasizing a snippet of text with a heavier font-weight.\nThe following snippet of text is rendered as bold text.\n**rendered as bold text**  renders to:\nrendered as bold text\nand this HTML\n\u0026lt;strong\u0026gt;rendered as bold text\u0026lt;/strong\u0026gt;  Italics For emphasizing a snippet of text with italics.\nThe following snippet of text is rendered as italicized text.\n_rendered as italicized text_  renders to:\nrendered as italicized text\nand this HTML:\n\u0026lt;em\u0026gt;rendered as italicized text\u0026lt;/em\u0026gt;  strikethrough In GFM (GitHub flavored Markdown) you can do strikethroughs.\n~~Strike through this text.~~  Which renders to:\nStrike through this text.\nHTML:\n\u0026lt;del\u0026gt;Strike through this text.\u0026lt;/del\u0026gt;  Blockquotes For quoting blocks of content from another source within your document.\nAdd \u0026gt; before any text you want to quote.\n\u0026gt; **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.  Renders to:\n Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n and this HTML:\n\u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Fusion Drive\u0026lt;/strong\u0026gt; combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\u0026lt;/p\u0026gt; \u0026lt;/blockquote\u0026gt;  Blockquotes can also be nested:\n\u0026gt; Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u0026gt;\u0026gt; Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.  Renders to:\n Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u0026gt; Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n Notices The old mechanism for notices overriding the block quote syntax (\u0026gt;\u0026gt;\u0026gt;) has been deprecated. Notices are now handled via a dedicated plugin called Markdown Notices\n Lists Unordered A list of items in which the order of the items does not explicitly matter.\nYou may use any of the following symbols to denote bullets for each list item:\n* valid bullet - valid bullet + valid bullet  For example\n+ Lorem ipsum dolor sit amet + Consectetur adipiscing elit + Integer molestie lorem at massa + Facilisis in pretium nisl aliquet + Nulla volutpat aliquam velit - Phasellus iaculis neque - Purus sodales ultricies - Vestibulum laoreet porttitor sem - Ac tristique libero volutpat at + Faucibus porta lacus fringilla vel + Aenean sit amet erat nunc + Eget porttitor lorem  Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit  Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at  Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nulla volutpat aliquam velit \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Phasellus iaculis neque\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Purus sodales ultricies\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Vestibulum laoreet porttitor sem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ac tristique libero volutpat at\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  Ordered A list of items in which the order of items does explicitly matter.\n1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem  Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML:\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nulla volutpat aliquam velit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt;  TIP: If you just use 1. for each number, Markdown will automatically number each item. For example:\n1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem  Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  Code Inline code Wrap inline snippets of code with `.\nIn this example, `\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;` should be wrapped as **code**.  Renders to:\nIn this example, \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; should be wrapped with code.\nHTML:\n\u0026lt;p\u0026gt;In this example, \u0026lt;code\u0026gt;\u0026amp;lt;section\u0026amp;gt;\u0026amp;lt;/section\u0026amp;gt;\u0026lt;/code\u0026gt; should be wrapped with \u0026lt;strong\u0026gt;code\u0026lt;/strong\u0026gt;.\u0026lt;/p\u0026gt;  Indented code Or indent several lines of code by at least four spaces, as in:\n // Some comments line 1 of code line 2 of code line 3 of code  Renders to:\n// Some comments line 1 of code line 2 of code line 3 of code  HTML:\n\u0026lt;pre\u0026gt; \u0026lt;code\u0026gt; // Some comments line 1 of code line 2 of code line 3 of code \u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt;  Block code \u0026ldquo;fences\u0026rdquo; Use \u0026ldquo;fences\u0026rdquo; ``` to block in multiple lines of code.\n ``` markup Sample text here... ```  Sample text here...  HTML:\n\u0026lt;pre\u0026gt; \u0026lt;code\u0026gt;Sample text here...\u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt;  Syntax highlighting GFM, or \u0026ldquo;GitHub Flavored Markdown\u0026rdquo; also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code \u0026ldquo;fence\u0026rdquo;, `js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code:\n ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ```  Renders to:\ngrunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } };  Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n| Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. |  Renders to:\n   Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    And this HTML:\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Option\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Description\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;data\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;path to data files to supply the data that will be passed into templates.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;engine\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;engine to be used for processing templates. Handlebars is the default.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;ext\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;extension to be used for dest files.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;  Right aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column.\n| Option | Description | | ------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. |     Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    Links Basic link [Assemble](http://assemble.io)  Renders to (hover over the link, there is no tooltip):\nAssemble\nHTML:\n\u0026lt;a href=\u0026quot;http://assemble.io\u0026quot;\u0026gt;Assemble\u0026lt;/a\u0026gt;  Add a title [Upstage](https://github.com/upstage/ \u0026quot;Visit Upstage!\u0026quot;)  Renders to (hover over the link, there should be a tooltip):\nUpstage\nHTML:\n\u0026lt;a href=\u0026quot;https://github.com/upstage/\u0026quot; title=\u0026quot;Visit Upstage!\u0026quot;\u0026gt;Upstage\u0026lt;/a\u0026gt;  Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\n# Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3)  will jump to these sections:\n## Chapter 1 \u0026lt;a id=\u0026quot;chapter-1\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one. ## Chapter 2 \u0026lt;a id=\u0026quot;chapter-2\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one. ## Chapter 3 \u0026lt;a id=\u0026quot;chapter-3\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one.  NOTE that specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works.\nImages Images have a similar syntax to links but include a preceding exclamation point.\n![Minion](http://octodex.github.com/images/minion.png)  or\n![Alt text](http://octodex.github.com/images/stormtroopocat.jpg \u0026quot;The Stormtroopocat\u0026quot;)  Like links, Images also have a footnote style syntax\nAlternative usage : note images ![Alt text][id]  With a reference later in the document defining the URL location:\n[id]: http://octodex.github.com/images/dojocat.jpg \u0026quot;The Dojocat\u0026quot;  Resizing image Add HTTP parameters width and/or height to the link image to resize the image. Values are CSS values (default is auto).\n![Minion](http://octodex.github.com/images/minion.png?width=20%)  ![Minion](http://octodex.github.com/images/minion.png?height=50px)  ![Minion](http://octodex.github.com/images/minion.png?height=50px\u0026amp;width=300px)  Add CSS classes Add a HTTP classes parameter to the link image to add CSS classes. shadowand border are available but you could define other ones.\n![stormtroopocat](http://octodex.github.com/images/stormtroopocat.jpg?classes=shadow)  ![stormtroopocat](http://octodex.github.com/images/stormtroopocat.jpg?classes=border)  ![stormtroopocat](http://octodex.github.com/images/stormtroopocat.jpg?classes=border,shadow)  "
},
{
	"uri": "http://localhost:1313/uneurl/cont/",
	"title": "Content",
	"tags": [],
	"description": "",
	"content": " Chapter 2 Content Find out how to create and organize your content quickly and intuitively.\n"
},
{
	"uri": "http://localhost:1313/uneurl/cont/pages/second-child-page/truc/",
	"title": "First child of the second child pafe",
	"tags": [],
	"description": "",
	"content": "trrregergg\n"
},
{
	"uri": "http://localhost:1313/uneurl/basics/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": "Thanks to the simplicity of Hugo, this page is as empty as this theme needs requirements.\nJust download Hugo binary for your OS (Windows, Linux, Mac) : it\u0026rsquo;s that simple.\n"
},
{
	"uri": "http://localhost:1313/uneurl/cont/pages/second-child-page/",
	"title": "Second child pafe",
	"tags": [],
	"description": "",
	"content": "trrg\n"
},
{
	"uri": "http://localhost:1313/uneurl/contributing/",
	"title": "Contributing",
	"tags": [],
	"description": "",
	"content": " To help the world be a better place, you could :\n Contribute to this doc by using Edit this page link. Contribute to Hugo, the static website generator which this theme is for Contribute to Grav, the flat file CMS of which this theme is from (Thanks to MIT license) Contribute to the Hugo-theme-learn theme itself  Contributors Thanks to them \n.ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start } .ghContributors  div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors  div label{ padding-left: 4px ; } .ghContributors  div span{ font-size: x-small; padding-left: 4px ; }  TODO  Handling videos Add optional button to create doc issue (like github)  "
},
{
	"uri": "http://localhost:1313/uneurl/cont/shortcodes/",
	"title": "Shortcodes",
	"tags": [],
	"description": "",
	"content": " Hugo uses Markdown for its simple content format. However, there are a lot of things that Markdown doesn’t support well. You could use pure HTML to expand possibilities.\nBut this happens to be a bad idea. Everyone uses Markdown because it\u0026rsquo;s pure and simple to read even non-rendered. You should avoid HTML to keep it as simple as possible.\nTo avoid this limitations, Hugo created shortcodes. A shortcode is a simple snippet inside a page.\nHugo-theme-learn provides multiple shortcodes on top of existing ones.\nNotice The notice shortcode shows 4 types of disclaimers to help you structure your page.\nNote {{% notice note %}} A notice disclaimer {{% /notice %}}  renders as\nA notice disclaimer\n Info {{% notice info %}} An information disclaimer {{% /notice %}}  renders as\nAn information disclaimer\n Tip {{% notice tip %}} A tip disclaimer {{% /notice %}}  renders as\nA tip disclaimer\n Warning {{% notice warning %}} An warning disclaimer {{% /notice %}}  renders as\nA warning disclaimer\n Button Button is a just a clickable button with optional icon.\n{{% button href=\u0026quot;https://getgrav.org/\u0026quot; %}}Get Grav{{% /button %}} {{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fa fa-play\u0026quot; %}}Get Grav with icon{{% /button %}} {{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fa fa-share\u0026quot; icon-position=\u0026quot;right\u0026quot; %}}Get Grav with icon right{{% /button %}}  Get Grav   Get Grav with icon  Get Grav with icon right   "
},
{
	"uri": "http://localhost:1313/uneurl/basics/installation/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": " The following steps are here to help you initialize your new website. If you don\u0026rsquo;t know Hugo at all, we strongly suggest you to train by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u0026lt;new_project\u0026gt;  Install the theme Install the Hugo-theme-learn theme by following this documentation\nThe theme\u0026rsquo;s repository is: https://github.com/matcornic/hugo-theme-learn.git\nBasic configuration When building the website, you can set a theme by using --theme option. We suggest you to edit your configuration file and set the theme by default. Example with config.toml format.\ntheme = \u0026quot;hugo-theme-learn\u0026quot;  Create your first chapter page Hugo-theme-learn provides archetypes to create skeletons for your website. Begin by creating your first chapter page with the following command\n# _index.md files are considered as chapters hugo new --kind chapter basics/_index.md  Create your first content pages Then, create content pages inside the previous chapter. Here are two ways to create content in the chapter :\nhugo new basics/first-content.md hugo new basics/second-content/index.md  Enable search functionality As the index generation is not yet supported by Hugo (PR #1853), we decided to use lunr index. As soon as the generation of the index will be supported by hugo, we will use the official format.\nSo to use the search functionality, you just have to put a lunr index which respects this format :\n[ { \u0026quot;uri\u0026quot;: \u0026quot;/docs/01-start/index\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Get started\u0026quot;, \u0026quot;content\u0026quot;: \u0026quot;\\n\\nGet started\\n\\nAll you need to know...\\n\u0026quot;, \u0026quot;tags\u0026quot;: [\u0026quot;start\u0026quot;, \u0026quot;intro\u0026quot;] }, ... ]  into a static/json/search.json file in your hugo project.\nAnd set search = true in your config.toml\nTo generate your lunr index, you can see this project https://github.com/gwleclerc/lunr-hugo which parse your markdown files and extract toml and yaml headers to create index with corresponding format.\nIn order to generate the index of your static site launch the following comand after installing lunr-hugo using npm\n lunr-hugo -i \u0026quot;\u0026lt;content directory\u0026gt;/**/*.md\u0026quot; -o static/json/search.json -l \u0026lt;header format (yaml or toml)\u0026gt;  Launching the website Launch the following command\nhugo serve  Go to http://localhost:1313/basics\nIf you are curious, at the home page (http://localhost:1313/), you should see an empty homepage. It\u0026rsquo;s because this theme does not really provide a default homepage.\nYou typically have 2 choices :\n Create an overview homepage for your project. Write an index.html file in layouts/ folder. Create a redirection to one your documentation page. Either by:  Configuring your server to automatically redirect homepage to one your documentation page - Recommended Creating an empty html page with the following code in the head tag :\n   \u0026lt;meta http-equiv=\u0026quot;refresh\u0026quot; content=\u0026quot;0; url=http://example.com/\u0026quot;/\u0026gt;  "
},
{
	"uri": "http://localhost:1313/uneurl/basics/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Site configuration On top of Hugo global configuration, Hugo-theme-learn lets you define the following parameters :\n[params] # Prefix URL to edit current page. Useful to give opportunity to people to create merge request for your doc. # See the config.toml file from this documentation site to have an example. editURL = \u0026quot;\u0026quot; # Author of the site, will be used in meta information author = \u0026quot;\u0026quot; # Description of the site, will be used in meta information description = \u0026quot;\u0026quot; # Shows a checkmark for visited pages on the menu. Default to false showVisitedLinks = false # Automatically generates prev and next arrows autoNav = false # Activate search. Don't forget to generate the JSON index file (go check get started page) search = false  Assets are based on the baseurl of the site. So, don\u0026rsquo;t forget to configure yours in the config.toml file. Absolutely needed for Github pages like http://userid.github.io/project.\n Style customization Hugo-theme-learn has been built to be as configurable as possible by defining multiple partials\nIn themes/hugo-theme-learn/layouts/partials/, you will find all the partials defined for this theme. If you need to overwrite something, don\u0026rsquo;t change the code directly. Instead follow this page. You\u0026rsquo;d create a new partial in the layouts/partials folder of your local project. This partial will have the priority.\nThis theme defines the following partials :\n header: the header of the content page (contains the breadcrumbs) style: CSS imports, in case you want to override the style footer: the footer of the content page (contains the arrows) script: Javacript includes, in case you want to add Javascript on top of provided ones favicon: the favicon logo: the logo, on top left hand corner. meta: HTML meta tags, if you want to change default behavior toc: table of contents  Change the logo Create a new file in layouts/partials/ named logo.html. Then write any HTML you want. You could use an img HTML tag and reference an image created under the static folder, or you could paste a SVG definition !\nThe size of the logo will adapt automatically\n Change the favicon If your favicon is a png, just drop off your image in your local static/images/ folder and names it favicon.png\nIf you need to change this default behavior, create a new file in layouts/partials/ named favicon.html. Then write something like this:\n\u0026lt;link rel=\u0026quot;shortcut icon\u0026quot; href=\u0026quot;/images/favicon.png\u0026quot; type=\u0026quot;image/x-icon\u0026quot; /\u0026gt;  Change default colors To change default colors, you will have to add a new css file. In order to do that :\n Create a css file in your local static/css/ folder Create a partial HTML in your local layouts/partials/ named style.html and add the following line  \u0026lt;link href=\u0026quot;/css/yourfile.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot;\u0026gt;  Then, create CSS in the new file, overwriting default behavior. Don\u0026rsquo;t panic, we give you, just below, colors that are commonly changed.\n/* background behind the logo*/ #header { background: \u0026lt;color\u0026gt;; border-color: \u0026lt;color\u0026gt;; } /* Background color of the menu */ #sidebar { background-color: \u0026lt;color\u0026gt;; } /* Background color of the menu, when clicked */ #sidebar ul.topics \u0026gt; li.parent, #sidebar ul.topics \u0026gt; li.active { background-color: \u0026lt;color\u0026gt;; } /* Color of all links, including arrows to get to previous and next pages */ a { color: \u0026lt;color\u0026gt;; } a:hover { color: \u0026lt;color\u0026gt;; }  "
},
{
	"uri": "http://localhost:1313/uneurl/cont/archetypes/",
	"title": "Archetypes",
	"tags": [],
	"description": "",
	"content": " Using the command: hugo new [relative new content path], you can start a content file with the date and title automatically set. While this is a welcome feature, active writers need more : archetypes.\nIt is pre-configured skeleton pages with default front matter. Please refer to the documentation for types of page to understand the differences.\nChapter To create a Chapter page, run the following commands\nhugo new --kind chapter \u0026lt;name\u0026gt;/_index.md  It will create a page with predefined Front-Matter:\n--- date: 2016-04-10T23:17:49+02:00 icon: \u0026lt;b\u0026gt;X. \u0026lt;/b\u0026gt; title: index weight: 0 --- ### Chapter X # Some Chapter title Lorem ipsum  Default To create a default page, run either one of the following commands\n# Either hugo new \u0026lt;chapter\u0026gt;/\u0026lt;name\u0026gt;/index.md # Or hugo new \u0026lt;chapter\u0026gt;/\u0026lt;name\u0026gt;.md  It will create a page with predefined Front-Matter:\n--- date: 2016-04-09T17:51:50+02:00 title: index toc: true weight: 5 --- Lorem Ipsum  Don\u0026rsquo;t forget that Hugo-theme-learn supports only one level under a chapter\n"
},
{
	"uri": "http://localhost:1313/uneurl/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/uneurl/",
	"title": "Hugo Learn Documentation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/uneurl/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]